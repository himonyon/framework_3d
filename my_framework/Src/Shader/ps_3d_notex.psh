struct PS_IN
{
	float4 pos : SV_POSITION;
	float4 color : COLOR;
	float2 texture_pos : TEXTURE0;
};

cbuffer ConstantBuffer
{
	float4x4 World;			// ワールド変換行列
	float4x4 View;			// ビュー変換行列
	float4x4 Projection;	// 透視射影変換行列
	float4 CameraPos;		// カメラ座標
	float4 LightVector;		// ライト方向
	float4 LightColor;		// ライトカラー
	float4 MaterialAmbient;	// アンビエント
	float4 MaterialDiffuse;	// ディフューズ
	float4 MaterialSpecular;// スペキュラー
	float4 color;
}

Texture2D    Texture : register(t0[0]); // Textureをスロット0の0番目のテクスチャレジスタに設定
SamplerState Sampler : register(s0[0]); // Samplerをスロット0の0番目のサンプラレジスタに設定

float4 main(PS_IN input) : SV_Target
{
	input.color[3] = 1;
	float ambient_factor = MaterialAmbient[3];
	float diffuse_factor = MaterialDiffuse[3];

	float4 ambient_color = MaterialAmbient * ambient_factor;
	float4 diffuse_color = input.color * (LightColor * MaterialDiffuse) * diffuse_factor;

	// テクスチャカラーの取得
	float4 tex_color = Texture.Sample(Sampler, input.texture_pos);

	float4 outCol = diffuse_color + ambient_color;

	// アンビエントカラー + ディフューズカラー
	//return outCol;
	return float4(0.3, 0.3, 0.3, 1) * input.color;;
}
