//グローバル
Texture2D g_texDecal: register(t0);
SamplerState g_samLinear : register(s0);

struct PS_INPUT {
	float4 position : SV_POSITION;
	float4 normal : NORMAL;
	float2 tex : TEXTURE0;
	float3 eyeVector : TEXCOORD0;
};

//グローバル
cbuffer global_0:register(b0)
{
	matrix g_mW;//ワールド行列
	matrix g_mWVP; //ワールドから射影までの変換行列
	float4 g_LightDir;  //ライトの方向ベクトル
	float4 g_Eye;//カメラ位置
};

cbuffer global_1:register(b1)
{
	float4 g_Ambient = float4(0, 0, 0, 0);//アンビエント光
	float4 g_Diffuse = float4(1, 0, 0, 0); //拡散反射(色）
	float4 g_Specular = float4(1, 1, 1, 1);//鏡面反射
};


float4 main(PS_INPUT input) : SV_TARGET
{
	float3 LightDir = normalize(g_LightDir);
	float3 ViewDir = normalize(input.eyeVector);
	float4 NL = saturate(dot(input.normal, g_LightDir));

	float3 Reflect = normalize(2 * NL * input.normal - g_LightDir);
	float4 specular = pow(saturate(dot(Reflect, ViewDir)), 4);

	float4 Color = g_Diffuse * NL + specular * g_Specular;

	Color += g_texDecal.Sample(g_samLinear, input.tex);

	return Color;
}